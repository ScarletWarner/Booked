@page "/books/details"
@using Microsoft.EntityFrameworkCore
@using Booked.Models
@inject IDbContextFactory<Booked.Data.BookedContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Book</h2>
    <hr />
    @if (book is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@book.Title</dd>
            <dt class="col-sm-2">Author</dt>
            <dd class="col-sm-10">@book.Author</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@book.Price</dd>
            <dt class="col-sm-2">ISBN</dt>
            <dd class="col-sm-10">@book.ISBN</dd>
            <img src="@book.CoverURL" alt="@book.Title" class="card" />
        </dl>
        <div>
            <a href="@($"/booklist")">Back to List</a>
        </div>
    }
</div>

@code {
    private Book? book;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        book = await context.Book.FirstOrDefaultAsync(m => m.Id == Id);

        if (book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
