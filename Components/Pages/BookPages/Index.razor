@page "/books"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Booked.Models
@using Booked.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Booked.Data.BookedContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Books</h1>

<p>
    <input type="search" @bind="titleFilter" @bind:event="oninput" />
</p>

<p>
    <a href="books/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredBooks" Pagination="pagination">
    <PropertyColumn Property="book => book.Title" />
    <PropertyColumn Property="book => book.Author" />
    <PropertyColumn Property="book => book.Genre" />
    <PropertyColumn Property="book => book.Price" />

    <TemplateColumn Context="book">
        <a href="@($"books/edit?id={book.Id}")">Edit</a> |
        <a href="@($"books/details?id={book.Id}")">Details</a> |
        <a href="@($"books/delete?id={book.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination" />

@code {
    private BookedContext context = default!;

    private string titleFilter = string.Empty;

    private IQueryable<Book> FilteredBooks =>
        context.Book.Where(m => m.Title!.Contains(titleFilter));
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private PaginationState pagination = new PaginationState { ItemsPerPage = 2 };
}
